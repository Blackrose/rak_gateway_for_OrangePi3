#!/bin/bash

source /usr/local/rak/shell_script/rak_common.sh
source /usr/lib/armbian-config/jobs.sh

GATEWAY_CONFIG_INFO=/usr/local/rak/gateway-config-info.json
LORA_PKT_PATH=/opt/ttn-gateway/packet_forwarder/lora_pkt_fwd

do_if_proc_is_run()
{
    if [ -n "`pgrep $1`" ]; then
        return 0
    else
        return 1
    fi
}

do_check_ipaddr()
{
    echo $1|grep "^[0-9]\{1,3\}\.\([0-9]\{1,3\}\.\)\{2\}[0-9]\{1,3\}$" > /dev/null;
    if [ $? -ne 0 ]
    then
        echo "Bad IP address" 
        return 1
    fi
    ipaddr=$1
    a=`echo $ipaddr|awk -F . '{print $1}'`
    b=`echo $ipaddr|awk -F . '{print $2}'`
    c=`echo $ipaddr|awk -F . '{print $3}'`
    d=`echo $ipaddr|awk -F . '{print $4}'`
    for num in $a $b $c $d
    do
        if [ $num -gt 255 ] || [ $num -lt 0 ] 
        then
            echo "Bad IP address" 
            return 1
        fi
   done

   return 0
}

do_get_gateway_info()
{
    
    do_get_json_value $1 $GATEWAY_CONFIG_INFO
}

do_check_ip_is_localhost()
{
    if [ "$1" = "localhost" ] || [ "$1" = "127.0.0.1" ]; then
        return 0
    else
        return 1
    fi
}

write_json_gateway_info()
{
    # $1 key; $2 value
    do_check_variable_type  $1
    RET=$?
    if [ $RET -eq 3 ]; then
        sed -i "s/^.*$1.*$/\"$1\":\"$2\",/" $GATEWAY_CONFIG_INFO
    fi
}

write_json_gateway_info_no_comma()
{
    # $1 key; $2 value
    do_check_variable_type  $1
    RET=$?
    if [ $RET -eq 3 ]; then
        sed -i "s/^.*$1.*$/\"$1\":\"$2\"/" $GATEWAY_CONFIG_INFO
    fi
}

write_json_server_plan()
{
    write_json_gateway_info "server_plan" $1
}

write_json_server_freq()
{
    write_json_gateway_info_no_comma "freq" $1
}

write_json_lora_server_ip()
{
    # . 字母 数字
    write_json_gateway_info "lora_server_ip" $1
}

write_json_wifi_mode()
{
    # 数字 1/2
    write_json_gateway_info "wifi_mode" $1
}

write_json_ap_ssid()
{
    # 数字 字母 - _
    write_json_gateway_info "ap_ssid" $1
}

write_json_ap_pwd()
{
    # 数字 字母 特殊字符
    write_json_gateway_info_no_comma "ap_pwd" $1
}

write_json_lan_ip()
{
    # 数字 . 校验下是否为有效IP
    write_json_gateway_info "lan_ip" $1
}

write_json_lan_gw()
{
    # 数字 . 校验下是否为有效IP
    write_json_gateway_info_no_comma "lan_gw" $1
}

write_json_wlan_ip()
{
    # 数字 . 校验下是否为有效IP
    write_json_gateway_info "wifi_ip" $1
}

write_json_wlan_gw()
{
    # 数字 . 校验下是否为有效IP
    write_json_gateway_info_no_comma "wifi_gw" $1
}

write_json_apn_name()
{
    # 任意
    write_json_gateway_info "apn_name" $1
}

write_json_apn_baud()
{
    # 数字
    write_json_gateway_info_no_comma "apn_baud" $1
}

write_json_lte_mode()
{
    # 数字
    write_json_gateway_info_no_comma "lte_mode" $1
}

write_json_active_lora_server()
{
    write_json_gateway_info "active_lora_server" $1
}

do_restart_packet_forwarder() {
    systemctl stop ttn-gateway
    systemctl start ttn-gateway
    RET=$?
    if [ $RET -eq 0 ]; then
        dialog --title "Restart packet-forwarder" --msgbox "The packet-forwarder has been restarted." 5 60
    fi
    if [ $# -eq 0 ]; then
        do_main_menu
    fi
}

do_copy_global_conf() {
    cp $LORA_PKT_PATH/global_conf/global_conf.$2.json $LORA_PKT_PATH/global_conf.json

    if [ "$1" = "ttn" ]; then
        dialog --title "Server-plan configuration" --msgbox "Server-plan configuration has been copied." 5 60
        write_json_server_plan 1
    elif [ "$1" = "loraserver" ]; then
        write_json_server_plan 2
        do_set_lora_server_ip
        cp /etc/loraserver/loraserver.$2.toml /etc/loraserver/loraserver.toml
        do_if_proc_is_run "loraserver"
        RET=$?
        if [ $RET -eq 0 ]; then
            do_LoRa_Server restart
        fi
    elif [ "$1" = "lorawan" ]; then
        write_json_server_plan 3
        do_set_lora_server_ip
    fi

    do_restart_packet_forwarder 1
}



do_setup_ttn_channel_plan() {
    default_item=1
    FUN=$(dialog --title "TTN Channel-plan configuration" --default-item $default_item --menu "Select the Channel-plan:" 18 60 12 \
        1 "AS_923" \
        2 "AU_915_928" \
        3 "CN_470_510" \
        4 "EU_863_870" \
        5 "IN_865_867" \
        6 "KR_920_923" \
        7 "RU_864_870" \
        8 "US_902_928" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        :
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_copy_global_conf "ttn" "as_923" 1;;
            2) do_copy_global_conf "ttn" "au_915_928" 2;;
            3) do_copy_global_conf "ttn" "cn_470_510" 3;;
            4) do_copy_global_conf "ttn" "eu_863_870" 4;;
            5) do_copy_global_conf "ttn" "in_865_867" 5;;
            6) do_copy_global_conf "ttn" "kr_920_923" 6;;
            7) do_copy_global_conf "ttn" "ru_864_870" 7;;
            8) do_copy_global_conf "ttn" "us_902_928" 8;;
        esac
    fi
}

do_enable_loraserver()
{
    systemctl enable loraserver
    systemctl enable lora-app-server
    systemctl enable lora-gateway-bridge
    systemctl restart loraserver
    systemctl restart lora-app-server
    systemctl restart lora-gateway-bridge
}

do_disable_loraserver()
{
    systemctl disable loraserver
    systemctl disable lora-app-server
    systemctl disable lora-gateway-bridge
    systemctl stop loraserver
    systemctl stop lora-app-server
    systemctl stop lora-gateway-bridge
}

do_set_lora_server_ip()
{
    rm /tmp/gate_server_ip -rf
    mkfifo /tmp/gate_server_ip
    default_item=`do_get_gateway_info lora_server.lora_server_ip`
    dialog --title "lora server IP" --nocancel --inputbox "SERVER_IP:" 10 40 "$default_item" 2> /tmp/gate_server_ip & 
    RET=$?
    if [ $RET -eq 1 ]; then
        echo "error"
    elif [ $RET -eq 0 ]; then
        gate_server_ip="$( cat /tmp/gate_server_ip  )"
        rm /tmp/gate_server_ip
        write_json_lora_server_ip "$gate_server_ip"
        sed -i "s/^.*server_address.*$/\t\"server_address\": \"$gate_server_ip\",/" $LORA_PKT_PATH/global_conf.json
        do_check_ip_is_localhost $gate_server_ip
        RET=$?
        if  [ $RET -eq 0 ]; then
            do_LoRa_Server enable
            do_LoRa_Server restart
        else
            do_LoRa_Server diable
            do_LoRa_Server stop
        fi
    fi
}

do_setup_LoRaServer_channel_plan() {
    default_item=1
    FUN=$(dialog --title "LoRaServer Channel-plan configuration" --default-item $default_item --menu "Server the Channel-plan:" 18 60 12 \
        1 "AS_923" \
        2 "AU_915_928" \
        3 "CN_470_510" \
        4 "EU_433" \
        5 "EU_863_870" \
        6 "IN_865_867" \
        7 "KR_920_923" \
        8 "RU_864_870" \
        9 "US_902_928" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_copy_global_conf "loraserver" "as_923" 1;;
            2) do_copy_global_conf "loraserver" "au_915_928" 2;;
            3) do_copy_global_conf "loraserver" "cn_470_510" 3;;
            4) do_copy_global_conf "loraserver" "eu_433" 4;;
            5) do_copy_global_conf "loraserver" "eu_863_870" 5;;
            6) do_copy_global_conf "loraserver" "in_865_867" 6;;
            7) do_copy_global_conf "loraserver" "kr_920_923" 7;;
            8) do_copy_global_conf "loraserver" "ru_864_870" 8;;
            9) do_copy_global_conf "loraserver" "us_902_928" 9;;
        esac
    fi
}

do_setup_LoRaWan_channel_plan() {
    default_item=1
    FUN=$(dialog --title "LoRaServer Channel-plan configuration" --default-item $default_item --menu "Server the Channel-plan:" 18 60 12 \
        1 "AS_923" \
        2 "AU_915_928" \
        3 "CN_470_510" \
        4 "EU_433" \
        5 "EU_863_870" \
        6 "IN_865_867" \
        7 "KR_920_923" \
        8 "RU_864_870" \
        9 "US_902_928" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        :
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_copy_global_conf "lorawan" "as_923" 1;;
            2) do_copy_global_conf "lorawan" "au_915_928" 2;;
            3) do_copy_global_conf "lorawan" "cn_470_510" 3;;
            4) do_copy_global_conf "lorawan" "eu_433" 4;;
            5) do_copy_global_conf "lorawan" "eu_863_870" 5;;
            6) do_copy_global_conf "lorawan" "in_865_867" 6;;
            7) do_copy_global_conf "lorawan" "kr_920_923" 7;;
            8) do_copy_global_conf "lorawan" "ru_864_870" 8;;
            9) do_copy_global_conf "lorawan" "us_902_928" 9;;
        esac
    fi
}

do_setup_channel_plan() {
    # $1: concentrator type
    # $2: config suffix, eg ".gps"
    default_item=`do_get_gateway_info lora_server.server_plan`

    FUN=$(dialog --title "Server-plan configuration" --default-item $default_item --menu "Select the Server-plan:" 15 60 3 \
        1 "Server is TTN" \
        2 "Server is LoRaServer" \
        3>&1 1>&2 2>&3)
    RET=$?

    if [ $RET -eq 1 ]; then
        :
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_setup_ttn_channel_plan;;
            2) do_setup_LoRaServer_channel_plan ;;
        esac
    fi
    do_main_menu
}

do_LoRa_Server()
{
    systemctl $1 loraserver
    systemctl $1 lora-app-server
    systemctl $1 lora-gateway-bridge
}

do_lorawan_server()
{
    systemctl $1 lorawan-server
}

do_disable_all_lora_server()
{
    do_LoRa_Server stop
    do_lorawan_server stop

    do_LoRa_Server disable
    do_lorawan_server disable
    
    write_json_active_lora_server 1
}

do_select_LoRaServer()
{
    do_lorawan_server disable
    do_lorawan_server stop

    do_LoRa_Server enable
    do_LoRa_Server start
    
    write_json_active_lora_server 2
}

do_select_LoRaWan()
{
    do_LoRa_Server disable
    do_LoRa_Server stop

    do_lorawan_server enable
    do_lorawan_server start
    
    write_json_active_lora_server 3
}

do_select_lora_server()
{
	default_item=`do_get_gateway_info active_lora_server`
	FUN=$(dialog --title "Select lora server" --cancel-label "Quit" --default-item $default_item --menu "Configuration options:" 13 80 20 \
        1 "Disable all lora server" \
        2 "Select LoRaServer" \
        3 "Select LoRaWan"	\
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        clear
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_disable_all_lora_server;;
            2) do_select_LoRaServer;;
            3) do_select_LoRaWan;;
        esac
    fi
    do_main_menu
}

function select_default_interface ()
{
    ALREADY_DEFINED=$(cat /etc/iptables.ipv4.nat 2> /dev/null | grep "POSTROUTING -o" | tail -1 | awk '{ print $4 }')
    if [[ -n "${ALREADY_DEFINED}" ]]; then

        DEFAULT_ADAPTER=${ALREADY_DEFINED}
    else
        IFS=$'\r\n'
        GLOBIGNORE='*'
        local ADAPTER=($(nmcli -t -f DEVICE connection show --active))
        local LIST=()
        for i in "${ADAPTER[@]}"
        do
                local IPADDR=$(LC_ALL=C ip -4 addr show dev ${i[0]} | awk '/inet/ {print $2}' | cut -d'/' -f1)
                ADD_SPEED=""
                [[ $i == eth* || $i == en* ]] && ADD_SPEED=$(ethtool $i | grep Speed)
                [[ $i == wl* ]] && ADD_SPEED=$(LC_ALL=C nmcli -f RATE,DEVICE,ACTIVE dev wifi list | grep $i | grep yes | awk 'NF==4{print $1""$2}NF==1' | sed -e 's/^/  Speed: /' | tail -1)
                [[ $IPADDR != "172.24.1.1" && -n $IPADDR ]] && LIST+=( "${i[0]//[[:blank:]]/}" "${IPADDR} ${ADD_SPEED}" )
        done
        LIST_LENGTH=$((${#LIST[@]}/2));
        if [ "$LIST_LENGTH" -eq 0 ]; then
                DEFAULT_ADAPTER="lo"
        elif [ "$LIST_LENGTH" -eq 1 ]; then
                DEFAULT_ADAPTER=${ADAPTER[0]}
        else
                exec 3>&1
                DEFAULT_ADAPTER=$(dialog --nocancel --backtitle "$BACKTITLE" --no-collapse \
                --title "Select default interface" --clear --menu "" $((6+${LIST_LENGTH})) 74 14 "${LIST[@]}" 2>&1 1>&3)
                exec 3>&-
        fi
    fi

    # set highest metric to default adaptor
    HIGHEST_METRIC=$(nmcli -t -f UUID,TYPE,DEVICE connection show --active | grep $DEFAULT_ADAPTER | sed 's/:.*$//')

    # set metric to 50
    nmcli connection modify $HIGHEST_METRIC ipv4.route-metric 50 2> /dev/null

    METRIC=77
    # set others wired
    REMAINING=( `nmcli -t -f UUID,TYPE,DEVICE connection show --active | grep ethernet | grep -v $DEFAULT_ADAPTER | sed 's/:.*$//'` )
    if [[ ${#REMAINING[@]} -ge 1 ]]; then
        for i in "${REMAINING[@]}"
        do
            METRIC=$(( $METRIC + 1 ))
            nmcli connection modify ${i} ipv4.route-metric $METRIC
        done
    fi

    # set other wireless
    METRIC=88
    REMAINING=( `nmcli -t -f UUID,TYPE,DEVICE connection show --active | grep wireless | grep -v $DEFAULT_ADAPTER | sed 's/:.*$//'` )
    if [[ ${#REMAINING[@]} -ge 1 ]]; then
        for i in "${REMAINING[@]}"
        do
            METRIC=$(( $METRIC + 1 ))
            nmcli connection modify ${i} ipv4.route-metric $METRIC
        done
    fi

    # create default metrics file
    cat <<-EOF > /etc/NetworkManager/conf.d/armbian-default-metric.conf
    [connection-ethernet-gateway]
    match-device=interface-name:$DEFAULT_ADAPTER
    ipv4.route-metric=50

    [connection-wifi-other]
    match-device=type:wifi
    ipv4.route-metric=88

    [connection-ethernet-other]
    match-device=type:ethernet
    ipv4.route-metric=77
EOF
}

function submenu_networking ()
{

# if there is more than one connected device
select_default_interface

while true; do

    LIST=()
    DIALOG_CANCEL=1
    DIALOG_ESC=255

    # check if we have some LTE modems
#    for i in $(lsusb | awk '{print $6}'); do lte "$i"; done;

    # edit ip
    LIST+=( "IP" "Select dynamic or edit static IP address" )

    # hostapd
    HOSTAPDBRIDGE=$(cat /etc/hostapd.conf 2> /dev/null | grep -w "^bridge=br0")
    HOSTAPDSTATUS=$(service hostapd status 2> /dev/null | grep -w active | grep -w running)

    if [[ -n $(LC_ALL=C nmcli device status 2> /dev/null | grep wifi | grep -v unavailable | grep -v unmanaged) ]]; then
        LIST+=( "WiFi" "Manage wireless networking" )
    else
        LIST+=( "Clear" "Clear possible blocked interfaces" )
    fi

    [[ -d /usr/local/vpnclient ]] && LIST+=( "VPN" "Manage Softether VPN client" ) && VPNSERVERIP=$(/usr/local/vpnclient/vpncmd /client localhost /cmd accountlist | grep "VPN Server" |grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | head -1)

    [[ $(ls -1 /etc/NetworkManager/system-connections 2> /dev/null) ]] && \
    LIST+=( "Forget" "Disconnect and forget all wireless connections" )

    # count number of menu items to adjust window size
    LISTLENGTH="$((12+${#LIST[@]}/2))"
    BOXLENGTH=${#LIST[@]}
    WIFICONNECTED=$(LC_ALL=C nmcli -f NAME,TYPE connection show --active 2> /dev/null | grep wireless | awk 'NF{NF-=1};1')

    local disclaimer=""

    local ipadd=$(ip -4 addr show dev $DEFAULT_ADAPTER | awk '/inet/ {print $2}' | cut -d'/' -f1)


    if [[ -n $(LC_ALL=C nmcli device status 2> /dev/null | grep $DEFAULT_ADAPTER | grep connected) ]]; then
        local ifup="\nIP ($DEFAULT_ADAPTER) via Network Manager: \Z1${ipadd}\n\Z0 "
    else
        if [[ -n $(service systemd-networkd status | grep -w active | grep -w running) ]]; then
            local ifup="\nIP ($DEFAULT_ADAPTER) via systemd-networkd: \Z1${ipadd}\n\Z0 "
        else
            local ifup="\nIP ($DEFAULT_ADAPTER) via IFUPDOWN: \Z1${ipadd}\n\Z0 "
        fi
    fi

    disclaimer="$ifup"

    if [[ -n $WIFICONNECTED ]]; then
        LISTLENGTH=$((LISTLENGTH+2))
        local connected="\n\Z0Connected to SSID: \Z1${WIFICONNECTED}\n\Z0 "
        disclaimer=$disclaimer"$connected"
    fi

    disclaimer=$disclaimer"\n\Z1Note\Zn: This tool can be successful only when drivers are configured properly. If auto-detection fails, you are on your own.\n "

    exec 3>&1
    selection=$(dialog --backtitle "$BACKTITLE" --colors --title " Wired, Wireless " --clear \
    --cancel-label "Back" --menu "${disclaimer}" $LISTLENGTH 70 $BOXLENGTH \
    "${LIST[@]}" 2>&1 1>&3)
    exit_status=$?
    exec 3>&-
    [[ $exit_status == $DIALOG_CANCEL || $exit_status == $DIALOG_ESC ]] && clear && break

    # run main function
    jobs "$selection"

done
}

do_get_gw_id()
{
    GATEWAY_EUI_NIC="eth0"
    if [[ `grep "$GATEWAY_EUI_NIC" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_NIC="wlan0"
    fi
        if [[ `grep "$GATEWAY_EUI_NIC" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_NIC="usb0"
    fi

    if [[ `grep "$GATEWAY_EUI_NIC" /proc/net/dev` == "" ]]; then
       echo ""
    fi
    GATEWAY_EUI=$(ip link show $GATEWAY_EUI_NIC | awk '/ether/ {print $2}' | awk -F\: '{print $1$2$3"FFFE"$4$5$6}')
    GATEWAY_EUI=${GATEWAY_EUI^^}
    echo $GATEWAY_EUI
}

do_main_menu() {
    GW_MODEL=`do_get_gw_model`
    GW_VERSION=`do_get_gw_version`
    GW_ID=`do_get_gw_id`

    if [ "$GW_MODEL" = "RAK2245" ] || [ "$GW_MODEL" = "RAK831" ]; then

        FUN=$(dialog --title "$GW_MODEL (Gateway ID:$GW_ID  Version: $GW_VERSION)" --cancel-label "Quit" --menu "Configuration options:" 16 80 20 \
            1 "Set pi password" \
            2 "Setup RAK Gateway LoRa concentrator" \
            3 "Restart packet-forwarder" \
            4 "Edit packet-forwarder config" \
            5 "Configure network" \
            3>&1 1>&2 2>&3)
        RET=$?
        if [ $RET -eq 1 ]; then
            clear
            return 0
        elif [ $RET -eq 0 ]; then
            case "$FUN" in
                1) do_setup_channel_plan;;
                2) do_restart_packet_forwarder;;
                3) nano $LORA_PKT_PATH/global_conf.json && do_main_menu;;
                4) submenu_networking;;
            esac
        fi
    elif [ "$GW_MODEL" = "RAK2247" ] || [ "$GW_MODEL" = "RAK833" ]; then
        FUN=$(dialog --title "$GW_MODEL (Gateway ID:$GW_ID  Version: $GW_VERSION)" --cancel-label "Quit" --menu "Configuration options:" 16 80 20 \
            1 "Setup RAK Gateway LoRa concentrator" \
            2 "Restart packet-forwarder" \
            3 "Edit packet-forwarder config" \
            4 "Configure network" \
            3>&1 1>&2 2>&3)
        RET=$?
        if [ $RET -eq 1 ]; then
            clear
            return 0
        elif [ $RET -eq 0 ]; then
            case "$FUN" in
                1) do_setup_channel_plan;;
                2) do_restart_packet_forwarder;;
                3) nano $LORA_PKT_PATH/global_conf.json && do_main_menu;;
                4) submenu_networking;;
            esac
        fi
    else
        echo "invalid gateway model:$GW_MODEL"

    fi
}

if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo gateway-config'\n"
  exit 1
fi

do_main_menu

